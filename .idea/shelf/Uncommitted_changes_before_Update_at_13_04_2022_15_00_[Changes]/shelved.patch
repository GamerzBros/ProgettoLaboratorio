Index: src/main/java/cittadini/LoginUtente.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cittadini;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.stage.Stage;\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.MessageDigest;\r\n\r\npublic class LoginUtente {\r\n    /**\r\n     * Percorso per il file contenente i dati dei cittadini registrati\r\n     */\r\n    public static final String PATH_TO_CITTADINI_REGISTRATI_DATI = \"data/Cittadini_Registrati.dati.txt\";\r\n    /**\r\n     * Codice fiscale dell'utente attualmente loggato\r\n     */\r\n    private String currentUser;\r\n    /**\r\n     * Centro vaccinale attualmente selezionato\r\n     */\r\n    private String currentCenter;\r\n\r\n    /**\r\n     * Effettua il login dell'utente.\r\n     * @param event L'evento che richiama il metodo. Necessario per ottenere la scena da cui prendere i dati inseriti dall'utente\r\n     */\r\n    public void loggaCittadini(ActionEvent event) {\r\n        Scene currentScene=((Button)event.getSource()).getScene();\r\n        String user = ((TextField)currentScene.lookup(\"#txt_userLogin\")).getText();\r\n        String pwd = ((TextField)currentScene.lookup(\"#pswd_login\")).getText();\r\n        String user_temp;\r\n        String pwd_temp;\r\n        String[] parts;\r\n        System.out.println(\"Login in corso\");\r\n\r\n        try {\r\n            if (!user.equals(\"\") && !pwd.equals(\"\")) {\r\n                FileReader fileReader=new FileReader(PATH_TO_CITTADINI_REGISTRATI_DATI);\r\n                BufferedReader reader=new BufferedReader(fileReader);\r\n                boolean isLogged=false;\r\n                String line;\r\n\r\n                while ((line=reader.readLine())!=null) {\r\n                    parts = line.split(\";\");\r\n                    user_temp = parts[2];\r\n                    pwd_temp = parts[3];\r\n\r\n                    if (user_temp.equals(user)) {\r\n\r\n                        MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\r\n                        pwd = toHexString(messageDigest.digest(pwd.getBytes(StandardCharsets.UTF_8)));\r\n\r\n                        if(pwd_temp.equals(pwd)) {\r\n                            System.out.println(\"LOGGATO\");\r\n                            isLogged = true;\r\n                            currentUser=parts[4]; //CF dell'utente\r\n\r\n                            Scene mainScene=(Scene)currentScene.getUserData();\r\n                            String[] userData=(String[])mainScene.getUserData();\r\n                            currentCenter=userData[0];\r\n                            userData[1]=currentUser;\r\n                            mainScene.setUserData(userData);\r\n\r\n                            Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();\r\n                            currentStage.close();\r\n\r\n                            Alert alertSuccessfullLogin=new Alert(Alert.AlertType.INFORMATION);\r\n                            alertSuccessfullLogin.setTitle(\"Login effettuato\");\r\n                            alertSuccessfullLogin.setContentText(\"Utente loggato\");\r\n                            alertSuccessfullLogin.showAndWait();\r\n\r\n                            //loadRegistraEventiAvversiUI();\r\n                        }\r\n                    }\r\n                }\r\n                if(!isLogged) {\r\n                    Alert noUserAlert = new Alert(Alert.AlertType.WARNING);\r\n                    noUserAlert.setTitle(\"Errore di login\");\r\n                    noUserAlert.setContentText(\"Utente non trovato!\");\r\n                    noUserAlert.show();\r\n                }\r\n            } else {\r\n                Alert alertNoData=new Alert(Alert.AlertType.WARNING);\r\n                alertNoData.setTitle(\"Inserisci dei dati\");\r\n                alertNoData.setContentText(\"Non hai inserito i dati\");\r\n                alertNoData.showAndWait();\r\n                System.out.println(\"Inserire dei dati\");\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converte un array di byte in una stringa. Viene utilizzato dopo aver effettuato l'hashing di una stringa, per ricomporre quest'ultima.\r\n     * @param array L'array contenente i byte di risultato dell'hashing.\r\n     * @return La stringa ottenuta come risultato dalla funzione di hash.\r\n     */\r\n    private String toHexString(byte[] array) {\r\n        StringBuilder sb = new StringBuilder(array.length * 2);\r\n\r\n        for (byte b : array) {\r\n            int value = 0xFF & b;\r\n            String toAppend = Integer.toHexString(value);\r\n\r\n            sb.append(toAppend);\r\n        }\r\n        sb.setLength(sb.length() - 1);\r\n        return sb.toString();\r\n    }\r\n\r\n    /**\r\n     * Carica la UI necessaria ad effettuare la registrazione di un utente.\r\n     * @param event L'evento che richiama il metodo. Necessario per chiudere la UI di login\r\n     */\r\n    public void loadRegisterCitizenUI(ActionEvent event){\r\n        try {\r\n            //Scene mainScene=((Button)event.getSource()).getScene();\r\n            Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();\r\n\r\n            FXMLLoader loader = new FXMLLoader();\r\n            URL url = getClass().getResource(\"/fxml/RegistraUtente.fxml\");\r\n            loader.setLocation(url);\r\n            Parent root = loader.load();\r\n\r\n            Scene scene = new Scene(root);\r\n            currentStage.setScene(scene);\r\n\r\n            //scene.setUserData(mainScene);\r\n        }\r\n        catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public void goBackToMain(ActionEvent event){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader();\r\n            URL xmlUrl = getClass().getResource(\"/fxml/SelectionUI.fxml\");\r\n            loader.setLocation(xmlUrl);\r\n\r\n            Parent root = loader.load();\r\n\r\n            Scene scene=new Scene(root);\r\n\r\n            Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();\r\n\r\n            currentStage.setScene(scene);\r\n        }\r\n        catch(IOException e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/cittadini/LoginUtente.java b/src/main/java/cittadini/LoginUtente.java
--- a/src/main/java/cittadini/LoginUtente.java	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/src/main/java/cittadini/LoginUtente.java	(date 1649854752226)
@@ -144,22 +144,9 @@
     }
 
     public void goBackToMain(ActionEvent event){
-        try {
-            FXMLLoader loader = new FXMLLoader();
-            URL xmlUrl = getClass().getResource("/fxml/SelectionUI.fxml");
-            loader.setLocation(xmlUrl);
-
-            Parent root = loader.load();
-
-            Scene scene=new Scene(root);
-
-            Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();
+        Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();
 
-            currentStage.setScene(scene);
-        }
-        catch(IOException e){
-            e.printStackTrace();
-        }
+        new MainCittadini(currentStage);
     }
 
 }
Index: src/main/resources/fxml/MainCittadini.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.shape.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<AnchorPane prefHeight=\"550.0\" prefWidth=\"920.0\" style=\"-fx-background-color: #1a73e8\" xmlns=\"http://javafx.com/javafx/11.0.2\" xmlns:fx=\"http://javafx.com/fxml/1\">\r\n    <children>\r\n        <Rectangle fill=\"white\" height=\"45.0\" layoutX=\"0.0\" layoutY=\"0.0\" style=\"-fx-border-style: hidden hidden solid hidden\" width=\"920.0\" />\r\n        <ScrollPane fx:id=\"scrollPane_CentriVaccinali\" hbarPolicy=\"NEVER\" layoutX=\"25.0\" layoutY=\"83.0\" prefHeight=\"443.0\" prefWidth=\"870.0\" style=\"-fx-background-radius: 0; -fx-background-color: transparent; -fx-border-color: #1a73e8;\" /> <!-- style=\"-fx-background: #1a73e8;-->\r\n        <Pane fx:id=\"pane_center_information\" layoutX=\"895\" layoutY=\"82\" prefHeight=\"443.0\" prefWidth=\"0.0\" style=\"-fx-background-color: white; -fx-background-radius: 8\" />\r\n        <TextField fx:id=\"txt_searchCenter\" layoutX=\"136.0\" layoutY=\"7.5\" onKeyTyped=\"#keyTyped\" prefHeight=\"30.0\" prefWidth=\"516.0\" promptText=\" Ricerca centro vaccinale\" style=\"-fx-padding: 0 0 0 28;\" />\r\n        <Button layoutX=\"130.0\" layoutY=\"4.5\" mnemonicParsing=\"false\" onAction=\"#findCenter\" prefHeight=\"30.0\" prefWidth=\"30.0\" style=\"-fx-background-color: transparent\">\r\n            <graphic>\r\n                <ImageView fitHeight=\"30\" fitWidth=\"30\" pickOnBounds=\"true\">\r\n                    <Image url=\"@/cittadini/search.png\" />\r\n                </ImageView>\r\n            </graphic>\r\n        </Button>\r\n        <Button layoutX=\"0.0\" layoutY=\"7.5\" onMouseClicked=\"#goBackFromMainCittadini\" style=\"-fx-background-color: transparent;\">\r\n            <graphic>\r\n                <ImageView fitHeight=\"22.0\" fitWidth=\"25.0\" preserveRatio=\"false\">\r\n                    <Image url=\"@/centrivaccinali/goBackIcon.png\" />\r\n                </ImageView>\r\n            </graphic>\r\n        </Button>\r\n        <RadioButton fx:id=\"radio_name\" layoutX=\"221.0\" layoutY=\"50.0\" mnemonicParsing=\"false\" prefHeight=\"19.0\" prefWidth=\"67.0\" selected=\"true\" text=\"Nome\" textFill=\"WHITE\">\r\n            <toggleGroup>\r\n                <ToggleGroup fx:id=\"searchType\" />\r\n            </toggleGroup>\r\n         <font>\r\n            <Font size=\"13.0\" />\r\n         </font>\r\n        </RadioButton>\r\n        <RadioButton fx:id=\"radio_type\" layoutX=\"288.0\" layoutY=\"50.0\" mnemonicParsing=\"false\" text=\"Indirizzo/Tipologia\" textFill=\"WHITE\" toggleGroup=\"$searchType\">\r\n         <font>\r\n            <Font size=\"13.0\" />\r\n         </font></RadioButton>\r\n        <Button layoutX=\"744.0\" layoutY=\"10.0\" mnemonicParsing=\"false\" onAction=\"#checkLogin\" prefHeight=\"25.0\" prefWidth=\"80.0\" style=\"-fx-border-style: hidden;-fx-alignment:  center; -fx-background-color: #1a73e8; -fx-background-radius: 8; -fx-text-fill: white;\" text=\"Accedi\">\r\n         <font>\r\n            <Font name=\"Roboto Light\" size=\"12.0\" />\r\n         </font></Button>\r\n        <Button layoutX=\"832.0\" layoutY=\"10\" mnemonicParsing=\"false\" onAction=\"#loadRegisterCitizenUI\" prefHeight=\"25.0\" prefWidth=\"80.0\" style=\"-fx-border-style: hidden;-fx-alignment:  center; -fx-background-color: #1a73e8; -fx-background-radius: 8; -fx-text-fill: white;\" text=\"Registrati\" />\r\n      <Label layoutX=\"140.0\" layoutY=\"50.0\" text=\"Ricerca per \" textFill=\"white\">\r\n         <font>\r\n            <Font size=\"14.0\" />\r\n         </font></Label>\r\n    </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/fxml/MainCittadini.fxml b/src/main/resources/fxml/MainCittadini.fxml
--- a/src/main/resources/fxml/MainCittadini.fxml	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/src/main/resources/fxml/MainCittadini.fxml	(date 1649854240295)
@@ -38,7 +38,7 @@
          <font>
             <Font size="13.0" />
          </font></RadioButton>
-        <Button layoutX="744.0" layoutY="10.0" mnemonicParsing="false" onAction="#checkLogin" prefHeight="25.0" prefWidth="80.0" style="-fx-border-style: hidden;-fx-alignment:  center; -fx-background-color: #1a73e8; -fx-background-radius: 8; -fx-text-fill: white;" text="Accedi">
+        <Button layoutX="744.0" layoutY="10.0" mnemonicParsing="false" onAction="#loadLoginUI" prefHeight="25.0" prefWidth="80.0" style="-fx-border-style: hidden;-fx-alignment:  center; -fx-background-color: #1a73e8; -fx-background-radius: 8; -fx-text-fill: white;" text="Accedi">
          <font>
             <Font name="Roboto Light" size="12.0" />
          </font></Button>
Index: src/main/java/cittadini/MainCittadini.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cittadini;\r\n\r\nimport centrivaccinali.SingoloCentroVaccinale;\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.KeyValue;\r\nimport javafx.animation.Timeline;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.Vector;\r\n\r\npublic class MainCittadini implements EventHandler<ActionEvent> {\r\n    /**\r\n     * Percorso per il file contente le informazioni dei centri vaccinali registrati\r\n     */\r\n    public static final String PATH_TO_CENTRIVACCINALI_DATI = \"data/CentriVaccinali.dati.txt\";\r\n    /**\r\n     * Parte iniziale percorso per il file del centro vaccinale selezionato\r\n     */\r\n    public static final String PRE_PATH_TO_EVENTI_AVVERSI=\"data/Vaccinati_\";\r\n    /**\r\n     * Parte finale del percorso del centro vaccinale selezionato\r\n     */\r\n    public static final String AFTER_PATH_TO_EVENTI_AVVERSI=\".dati.txt\";\r\n    /**\r\n     * Percorso per il file contenente i dati dei cittadini registrati\r\n     */\r\n    public static final String PATH_TO_CITTADINI_REGISTRATI_DATI = \"data/Cittadini_Registrati.dati.txt\";\r\n    /**\r\n     * Tipo di linea del file contente le informazioni relative al vaccinato\r\n     */\r\n    public static final String LINE_TYPE_PERSON =\"V\";\r\n    /**\r\n     * Tipo di linea del file contente le informazioni relative agli eventi avversi\r\n     */\r\n    public static final String LINE_TYPE_EVENT =\"E\";\r\n    /**\r\n     * Lista contente tutti i centri vaccinali presenti nel file. Popolata dal metodo getCentriVaccinaliFromFile()\r\n     */\r\n    private Vector<SingoloCentroVaccinale> centriVaccinaliList=new Vector<>();\r\n    /**\r\n     * ScrollPane contenente tutti gli elementi per rappresentare visivamente i centri vaccinali\r\n     */\r\n    @FXML\r\n    private ScrollPane scrollPane_CentriVaccinali;\r\n    /**\r\n     * Codice fiscale dell'utente attualmente loggato\r\n     */\r\n    private String currentUser;\r\n    /**\r\n     * Centro vaccinale attualmente selezionato\r\n     */\r\n    private String currentCenter;\r\n\r\n    private int selectedCenterID;\r\n    private boolean centerSelected=false;\r\n\r\n    private Stage currentStage;\r\n\r\n    public MainCittadini(Stage stage){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader();\r\n            URL xmlUrl = getClass().getResource(\"/fxml/MainCittadini.fxml\");\r\n            System.out.println(xmlUrl.toString());\r\n            loader.setLocation(xmlUrl);\r\n            loader.setController(this);\r\n\r\n            Parent root = loader.load();\r\n\r\n            Scene scene=new Scene(root);\r\n\r\n            stage.setScene(scene);\r\n            stage.setTitle(\"Portale Cittadini\");\r\n            stage.setY(50);\r\n            stage.setX(175);\r\n\r\n            String[] userData = new String[2];\r\n            scene.setUserData(userData);\r\n\r\n            scrollPane_CentriVaccinali = (ScrollPane) scene.lookup(\"#scrollPane_CentriVaccinali\");\r\n            scrollPane_CentriVaccinali.lookup(\".viewport\").setStyle(\"-fx-background-color: #1a73e8;\");\r\n\r\n            centriVaccinaliList = getCentriVaccinaliFromFile();\r\n\r\n            creaVbox(centriVaccinaliList);\r\n\r\n            currentStage=stage;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Carica la UI principale del portale dei cittadini. Questa UI Consente di scegliere il centro vaccinale presso cui consultare/inserire i dati. Viene chiamato dalla classe CentriVaccinali nel metodo onCittadiniSelected(ActionEvent event).\r\n     */\r\n    /*@Override\r\n    public void start(Stage stage) throws Exception {\r\n        try{\r\n            FXMLLoader fxmlLoader = new FXMLLoader();\r\n            URL url = getClass().getResource(\"/cittadini/MainCittadini.fxml\");\r\n            fxmlLoader.setLocation(url);\r\n            Parent root = fxmlLoader.load();\r\n\r\n            Scene scene = new Scene(root);\r\n\r\n            stage.setScene(scene);\r\n            stage.setTitle(\"Portale Cittadini\");\r\n            stage.setY(50);\r\n            stage.setX(175);\r\n\r\n            String[] userData = new String[2];\r\n            scene.setUserData(userData);\r\n\r\n            scrollPane_CentriVaccinali = (ScrollPane) scene.lookup(\"#scrollPane_CentriVaccinali\");\r\n            scrollPane_CentriVaccinali.lookup(\".viewport\").setStyle(\"-fx-background-color: #1a73e8;\");\r\n\r\n            centriVaccinaliList = getCentriVaccinaliFromFile();\r\n\r\n            creaVbox(centriVaccinaliList);\r\n\r\n            stage.show();\r\n        }\r\n        catch (IOException e){\r\n            e.printStackTrace();\r\n        }\r\n    }*/\r\n\r\n    /**\r\n     * Crea il vbox e i necessari componenti grafici contenenti le informazioni sui centri vaccinali consultabili.\r\n     * @param centriVaccinaliMostrati Lista contenente i centri vaccinale da inserire dentro il vbox (quindi dentro la UI).\r\n     */\r\n    private void creaVbox(List<SingoloCentroVaccinale> centriVaccinaliMostrati){\r\n        VBox scrollPaneContent=new VBox();\r\n        scrollPaneContent.setSpacing(15);\r\n        scrollPaneContent.setPrefHeight(409);\r\n        scrollPaneContent.setAlignment(Pos.CENTER);\r\n        //scrollPaneContent.setMinWidth(scrollPane_CentriVaccinali.getPrefWidth()-2);\r\n        scrollPane_CentriVaccinali.setContent(scrollPaneContent);\r\n\r\n        for (int i=0;i<centriVaccinaliMostrati.size();i++){\r\n            HBox hbox=new HBox();\r\n            hbox.setPrefHeight(40);\r\n            hbox.setAlignment(Pos.CENTER_LEFT);\r\n            hbox.setStyle(\"-fx-border-color:#9aa0a6; -fx-border-style: hidden; -fx-background-color: white; -fx-background-radius: 12; -fx-padding: 0 5 0 5\");\r\n            SingoloCentroVaccinale currentCentro=centriVaccinaliMostrati.get(i);\r\n            hbox.setSpacing(20);\r\n\r\n            Label lblName=new Label(currentCentro.getNome());\r\n            Label lblAddress=new Label(currentCentro.getIndirizzo());\r\n            Label lblType=new Label(currentCentro.getTipologia());\r\n            Button btnGoTo=new Button(\">\");\r\n\r\n\r\n            lblName.setPrefWidth(150);\r\n            lblName.setStyle(\"-fx-text-fill: black; -fx-font-family: Arial; -fx-font-size: 19\");\r\n\r\n\r\n            lblAddress.setPrefWidth(465);\r\n            lblAddress.setStyle(\"-fx-text-fill: black; -fx-font-family: Arial; -fx-font-size: 19\");\r\n\r\n\r\n            lblType.setPrefWidth(135);\r\n            lblType.setStyle(\"-fx-text-fill: black; -fx-font-family: Arial; -fx-font-size: 19\");\r\n\r\n\r\n            btnGoTo.setFont(new Font(\"Arial\",16));\r\n            btnGoTo.setStyle( \"-fx-cursor: hand; -fx-background-radius: 5em; -fx-min-width: 1px; -fx-background-color: #FFFFFF; -fx-border-radius: 5em; -fx-border-color: #000000;\");\r\n            btnGoTo.setId(String.valueOf(i));\r\n            btnGoTo.setOnAction(this);\r\n\r\n            HBox.setHgrow(lblAddress, Priority.ALWAYS);\r\n            hbox.getChildren().add(lblName);\r\n            hbox.getChildren().add(lblAddress);\r\n            hbox.getChildren().add(lblType);\r\n            hbox.getChildren().add(btnGoTo);\r\n\r\n            scrollPaneContent.getChildren().add(hbox);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Porta il cittadino alla UI del centro vaccinale sul quale ha cliccato.\r\n     * @param actionEvent L'evento che richiama il metodo. Necessario ad ottenere il bottone sorgente dell'evento dal quale è possibile ottenere l'id del centro selezionato.\r\n     */\r\n    @Override\r\n    public void handle(ActionEvent actionEvent) {\r\n        Button source = (Button) actionEvent.getSource();\r\n        ScrollPane centerListPane = (ScrollPane) source.getScene().lookup(\"#scrollPane_CentriVaccinali\");\r\n        Pane centerInfoPane = (Pane) source.getScene().lookup(\"#pane_center_information\");\r\n        int currentCenterID = Integer.parseInt(source.getId());\r\n\r\n        if(!centerSelected) {\r\n            selectedCenterID = currentCenterID;\r\n            centerSelected=true;\r\n\r\n            Timeline paneTransition = new Timeline(\r\n                    new KeyFrame(Duration.millis(350), new KeyValue(centerListPane.prefWidthProperty(), centerListPane.getPrefWidth() / 3)),\r\n                    new KeyFrame(Duration.millis(350), new KeyValue(centerInfoPane.prefWidthProperty(), centerListPane.getPrefWidth() - (centerListPane.getPrefWidth() / 3))),\r\n                    new KeyFrame(Duration.millis(350), new KeyValue(centerInfoPane.translateXProperty(), -(centerListPane.getPrefWidth() - (centerListPane.getPrefWidth() / 3)))));\r\n\r\n            paneTransition.play();\r\n\r\n            ScrollPane scrollPane=(ScrollPane) source.getScene().lookup(\"#scrollPane_CentriVaccinali\");\r\n            VBox vbox=(VBox)scrollPane.getContent();\r\n\r\n            for(int i=0;i<vbox.getChildren().size();i++){\r\n                HBox element=(HBox) vbox.getChildren().get(i);\r\n                ((Label)element.getChildren().get(0)).setPrefWidth(140);\r\n                ((Label)element.getChildren().get(1)).setPrefWidth(0);\r\n                ((Label)element.getChildren().get(2)).setPrefWidth(0);\r\n            }\r\n\r\n            loadVisualizzatoreCentroVaccinale(centerInfoPane, currentCenterID);\r\n\r\n        }\r\n        else if(currentCenterID==selectedCenterID){\r\n            Timeline paneTransition = new Timeline(\r\n                    new KeyFrame(Duration.millis(350), new KeyValue(centerListPane.prefWidthProperty(), centerListPane.getPrefWidth() * 3)),\r\n                    new KeyFrame(Duration.millis(350), new KeyValue(centerInfoPane.prefWidthProperty(), 0)),\r\n                    new KeyFrame(Duration.millis(350), new KeyValue(centerInfoPane.translateXProperty(), centerListPane.getPrefWidth()*2)));\r\n\r\n            centerSelected=false;\r\n\r\n            paneTransition.play();\r\n\r\n            ScrollPane scrollPane=(ScrollPane) source.getScene().lookup(\"#scrollPane_CentriVaccinali\");\r\n            VBox vbox=(VBox)scrollPane.getContent();\r\n\r\n            for(int i=0;i<vbox.getChildren().size();i++){\r\n                HBox element=(HBox) vbox.getChildren().get(i);\r\n                ((Label)element.getChildren().get(0)).setPrefWidth(150);\r\n                ((Label)element.getChildren().get(1)).setPrefWidth(465);\r\n                ((Label)element.getChildren().get(2)).setPrefWidth(133);\r\n            }\r\n        }\r\n        else{\r\n            selectedCenterID = currentCenterID;\r\n            loadVisualizzatoreCentroVaccinale(centerInfoPane, currentCenterID);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea la UI che mostra i dati relativi al centro vaccinale selezionato. Viene richiamato quando l'utente seleziona un centro vaccinale.\r\n     *\r\n     */\r\n    public void loadVisualizzatoreCentroVaccinale(Pane centerInfoPane, int selectedCenterID){\r\n        try {\r\n            //TODO ottimizzare sta roba controllando se è già stata caricata la UI tramite una variabile globale booleana\r\n            FXMLLoader fxmlLoader=new FXMLLoader(getClass().getResource(\"/fxml/visualizzazioneCentroVaccinale.fxml\"));\r\n            fxmlLoader.setController(this);\r\n            Scene scene=new Scene(fxmlLoader.load());\r\n            AnchorPane anchorPane=new AnchorPane(scene.lookup(\"#main_anchor_pane\"));\r\n            centerInfoPane.getChildren().add(anchorPane);\r\n\r\n            /*Label lbl_centreName = (Label) scene.lookup(\"#lbl_highlitedCenterName\");\r\n            Label lbl_centreAddress = (Label) scene.lookup(\"#lbl_highlitedCenterAddress\");\r\n            Label lbl_centreType = (Label) scene.lookup(\"#lbl_highlitedCenterType\");*/\r\n            //loadCentreInfo(selectedCenterID, lbl_centreName, lbl_centreAddress, lbl_centreType);\r\n            loadCenterInfo(selectedCenterID,scene);\r\n\r\n        }\r\n        catch(IOException e){\r\n            e.printStackTrace(); //TODO mettere popup con scritto \"errore nel caricamento dello info del centro\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Carica le informazioni principali del centri vaccinale selezionato.\r\n     * @param idCentro L'ID contenete il numero della riga del centro vaccinale selezionato nel file*/\r\n    /*@param lbl_centreName L'ettichetta contenete il nome del centro selezionato\r\n     * @param lbl_centreAddress L'ettichetta contenete l'indirizzo del centro selezionato\r\n     * @param lbl_centreType L'ettichetta contenete la tipologia del vaccina somministrato presso il centro selezione\r\n     */\r\n    public void loadCenterInfo(int idCentro, Scene currentScene){\r\n        try {\r\n            FileReader fileReader=new FileReader(PATH_TO_CENTRIVACCINALI_DATI);\r\n            BufferedReader reader=new BufferedReader(fileReader);\r\n\r\n            /*String data=reader.readLine();\r\n            int i=0;\r\n            while(i!=idCentro) {\r\n                data=reader.readLine();\r\n                i++;\r\n            }\r\n\r\n            StringTokenizer stringTokenizer=new StringTokenizer(data,\";\");\r\n            String name=stringTokenizer.nextToken();\r\n            String address=stringTokenizer.nextToken()+\" \"+stringTokenizer.nextToken()+\", \"+stringTokenizer.nextToken()+\" \"+stringTokenizer.nextToken()+\" (\"+stringTokenizer.nextToken()+\") \"+stringTokenizer.nextToken();\r\n            String type=stringTokenizer.nextToken();\r\n\r\n            lbl_centreName.setText(name);\r\n            lbl_centreAddress.setText(address);\r\n            lbl_centreType.setText(type);\r\n\r\n            currentCenter=name;*/\r\n\r\n            Vector<String> eventLines=leggiEventiAvversi(idCentro);\r\n            int[] singleEvents=new int[6];\r\n            Vector<String> otherEventsText=new Vector<>();\r\n            Vector<Integer> otherEventsValues=new Vector<>();\r\n\r\n            if(eventLines!=null) {\r\n                for (int i = 0; i < eventLines.size(); i++) {\r\n                    StringTokenizer tokenizer = new StringTokenizer(eventLines.get(i), \";\");\r\n                    tokenizer.nextToken();\r\n                    tokenizer.nextToken();\r\n                    tokenizer.nextToken();\r\n\r\n                    singleEvents[0] = singleEvents[0] + (Integer.parseInt(tokenizer.nextToken()));\r\n                    singleEvents[1] = singleEvents[1] + (Integer.parseInt(tokenizer.nextToken()));\r\n                    singleEvents[2] = singleEvents[2] + (Integer.parseInt(tokenizer.nextToken()));\r\n                    singleEvents[3] = singleEvents[3] + (Integer.parseInt(tokenizer.nextToken()));\r\n                    singleEvents[4] = singleEvents[4] + (Integer.parseInt(tokenizer.nextToken()));\r\n                    singleEvents[5] = singleEvents[5] + (Integer.parseInt(tokenizer.nextToken()));\r\n\r\n                    if (tokenizer.hasMoreTokens()) {\r\n                        otherEventsText.add(tokenizer.nextToken());\r\n                        otherEventsValues.add(Integer.parseInt(tokenizer.nextToken()));\r\n                    }\r\n                }\r\n\r\n\r\n                Label lbl_headacheEffect = (Label) currentScene.lookup(\"#lbl_effect1\");\r\n                Label lbl_feverEffect = (Label) currentScene.lookup(\"#lbl_effect2\");\r\n                Label lbl_hurtEffect = (Label) currentScene.lookup(\"#lbl_effect3\");\r\n                Label lbl_linfEffect = (Label) currentScene.lookup(\"#lbl_effect4\");\r\n                Label lbl_tacEffect = (Label) currentScene.lookup(\"#lbl_effect5\");\r\n                Label lbl_crsEffect = (Label) currentScene.lookup(\"#lbl_effect6\");\r\n\r\n                lbl_headacheEffect.setText(String.valueOf(singleEvents[0]));//evento1 = Mal di testa\r\n                lbl_feverEffect.setText(String.valueOf(singleEvents[1])); //evento2 = Febbre\r\n                lbl_hurtEffect.setText(String.valueOf(singleEvents[2])); //evento3 = Dolori muscolari o articolari\r\n                lbl_linfEffect.setText(String.valueOf(singleEvents[3])); //evento4 = Linfoadenopatia\r\n                lbl_tacEffect.setText(String.valueOf(singleEvents[4])); //evento5 = Tachicardia\r\n                lbl_crsEffect.setText(String.valueOf(singleEvents[5]));//evento6 = Crisi ipertensiva\r\n\r\n                ScrollPane scrollPane_otherEvents = (ScrollPane) currentScene.lookup(\"#scrollPane_otherEvents\");\r\n                VBox vbox = new VBox();\r\n                vbox.setStyle(\"-fx-padding: 0 6\");\r\n                scrollPane_otherEvents.setContent(vbox);\r\n\r\n                for (int i = 0; i < otherEventsText.size(); i++) {\r\n                    Pane vboxContent = new Pane();\r\n\r\n                    Label lbl_otherEventText = new Label(otherEventsText.get(i));\r\n                    lbl_otherEventText.setFont(Font.font(\"Franklin Gothic Medium\", 18));\r\n                    lbl_otherEventText.setPrefWidth(475);\r\n                    lbl_otherEventText.setPrefHeight(30);\r\n\r\n                    Label lbl_otherEventValue = new Label(String.valueOf(otherEventsValues.get(i)));\r\n                    lbl_otherEventValue.setFont(Font.font(\"Franklin Gothic Medium\", 18));\r\n                    lbl_otherEventValue.setPrefWidth(13);\r\n                    lbl_otherEventValue.setPrefHeight(30);\r\n                    lbl_otherEventValue.setLayoutX(490);\r\n\r\n                    //TODO aggiungere label con scritto \"intensità media\"\r\n\r\n                    vboxContent.getChildren().add(lbl_otherEventText);\r\n                    vboxContent.getChildren().add(lbl_otherEventValue);\r\n\r\n                    vbox.getChildren().add(vboxContent);\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n        catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Legge il file di testo, relativo al centro vaccinale selezionato, contente gli eventi avversi e gli utenti vaccinati\r\n     * @param currentCentreID L'ID contenete il numero della riga del centro vaccinale selezionato nel file\r\n     * @return Una lista di stringhe contente tutte le righe del file con eventi avversi relativi al centro vaccinale selezionato\r\n     */\r\n    public Vector<String> leggiEventiAvversi(int currentCentreID){\r\n        centriVaccinaliList=getCentriVaccinaliFromFile();\r\n\r\n        SingoloCentroVaccinale centroVaccinale=centriVaccinaliList.get(currentCentreID);\r\n\r\n        try{\r\n            FileReader fileReader=new FileReader(PRE_PATH_TO_EVENTI_AVVERSI+centroVaccinale.getNome()+AFTER_PATH_TO_EVENTI_AVVERSI);\r\n            BufferedReader reader=new BufferedReader(fileReader);\r\n\r\n            String line=reader.readLine();\r\n\r\n            Vector<String> eventLines=new Vector<>();\r\n            while (line!=null){\r\n                StringTokenizer tokenizer=new StringTokenizer(line,\";\");\r\n                if(tokenizer.nextToken().equals(LINE_TYPE_EVENT)) {\r\n                    eventLines.add(line);\r\n                }\r\n                line=reader.readLine();\r\n            }\r\n\r\n            return eventLines;\r\n\r\n        }\r\n        catch (IOException e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    /**\r\n     * Legge i centri vaccinali presenti nel file e li restituisce sotto firma di lista.\r\n     * @return Il vettore contente i centri vaccinali presenti nel file.\r\n     */\r\n    public static Vector<SingoloCentroVaccinale> getCentriVaccinaliFromFile() {\r\n        Vector<SingoloCentroVaccinale> vector = new Vector<>();\r\n\r\n        try {\r\n            FileReader fileReader = new FileReader(PATH_TO_CENTRIVACCINALI_DATI);\r\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\r\n\r\n            String line = null;\r\n\r\n            while ((line = bufferedReader.readLine()) != null) {\r\n                StringTokenizer st = new StringTokenizer(line, \";\");\r\n                if (st.countTokens() == 8) {\r\n                    String nome = st.nextToken();\r\n                    String via = st.nextToken();\r\n                    String nome1 = st.nextToken();\r\n                    String num_civico = st.nextToken();\r\n                    String comune = st.nextToken();\r\n                    String provincia = st.nextToken();\r\n                    String cap = st.nextToken();\r\n                    String indirizzo = via+\" \"+nome1+\", \"+num_civico+\", \"+comune+\" (\"+provincia+\") \"+cap;\r\n                    String tipologia = st.nextToken();\r\n\r\n                    vector.add(new SingoloCentroVaccinale(nome, indirizzo, tipologia));\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return vector;\r\n\r\n    }\r\n\r\n    /**\r\n     * Effettua la ricerca di un centro vaccinale nel file di testo. Richiama poi il metodo per aggiornare la UI mostrando solo i centri vaccinali che corrispondono ai parametri della ricerca.\r\n     * @param event L'evento che richiama il metodo. Necessario per ottenere la scena attuale da cui prendere i parametri di ricerca.\r\n     */\r\n    public void findCenter(ActionEvent event) {\r\n        Scene currentScene=((Button)event.getSource()).getScene();\r\n        search(currentScene);\r\n    }\r\n\r\n    public void keyTyped(KeyEvent event){\r\n        Scene currentScene=((TextField)event.getSource()).getScene();\r\n        search(currentScene);\r\n    }\r\n\r\n    public void search(Scene currentScene){\r\n        centriVaccinaliList=getCentriVaccinaliFromFile();\r\n\r\n        Vector<SingoloCentroVaccinale> vector_search = new Vector<>();\r\n\r\n        String search = ((TextField)currentScene.lookup(\"#txt_searchCenter\")).getText().toLowerCase();\r\n        boolean searchByName=((RadioButton)currentScene.lookup(\"#radio_name\")).isSelected();\r\n        boolean searchByTypeAndAddress=((RadioButton)currentScene.lookup(\"#radio_type\")).isSelected();\r\n\r\n        for(int index=0;index<centriVaccinaliList.size();index++){\r\n            SingoloCentroVaccinale tempCentre=centriVaccinaliList.get(index);\r\n            String nome=tempCentre.getNome();\r\n            String indirizzo=tempCentre.getIndirizzo();\r\n            String tipologia=tempCentre.getTipologia();\r\n\r\n            if (searchByName){\r\n                if((nome.toLowerCase()).contains(search)){\r\n                    vector_search.add(new SingoloCentroVaccinale(nome, indirizzo, tipologia));\r\n                }\r\n            }\r\n            else if(searchByTypeAndAddress){\r\n                if((indirizzo.toLowerCase()).contains(search) || (tipologia.toLowerCase()).contains(search)) {\r\n                    vector_search.add(new SingoloCentroVaccinale(nome, indirizzo, tipologia));\r\n                }\r\n            }\r\n        }\r\n        creaVbox(vector_search);\r\n    }\r\n\r\n    public void goBackFromMainCittadini(MouseEvent event){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader();\r\n            URL xmlUrl = getClass().getResource(\"/fxml/SelectionUI.fxml\");\r\n            loader.setLocation(xmlUrl);\r\n\r\n            Parent root = loader.load();\r\n\r\n            Scene scene=new Scene(root);\r\n\r\n            Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();\r\n\r\n            currentStage.setScene(scene);\r\n        }\r\n        catch(IOException e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Controlla che l'utente sia loggato quando prova ad inserire nuovi eventi avversi.\r\n     * @param event L'evento che richiama il metodo. Necessario per ottenere la scena attuale da cui prendere il nome del centro vaccinale selezionato e, se presente, l'utente attuale.\r\n     */\r\n    public void checkLogin(ActionEvent event){\r\n        Scene mainScene=((Button)event.getSource()).getScene();\r\n        Stage currentStage=(Stage)mainScene.getWindow();\r\n        String[] userData=(String[]) mainScene.getUserData();\r\n        currentCenter=userData[0];\r\n\r\n        if(userData[1]!=null){\r\n            currentUser=userData[1];\r\n            //TODO rivedere dove porta il login e il register\r\n            loadRegistraEventiAvversiUI();\r\n        }\r\n        else{\r\n            //TODO aggiungere un popup per dire all'utente di loggarsi prima\r\n            loadLoginUI(currentStage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Carica la UI che permette ad un utente di effettuare il login, o in alternativa, di caricare la UI necessaria alla registrazione\r\n     * @param stage La scena da cui inserire e prendere il nome centro vaccinale e il codice fiscale del cittadino loggato\r\n     */\r\n    public void loadLoginUI(Stage stage){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader();\r\n            URL url = getClass().getResource(\"/fxml/LoginUtente.fxml\");\r\n            loader.setLocation(url);\r\n            Parent root = loader.load();\r\n\r\n            Scene scene = new Scene(root);\r\n            stage.setScene(scene);\r\n\r\n            //scene.setUserData(currentStage);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea la UI che permette ad un utente di inserire eventi avversi.\r\n     */\r\n    public void loadRegistraEventiAvversiUI(){\r\n        try {\r\n\r\n            FXMLLoader loader=new FXMLLoader();\r\n            URL url=getClass().getResource(\"registraEventiAvversi.fxml\");\r\n            loader.setLocation(url);\r\n            Parent root=loader.load();\r\n\r\n            Scene scene=new Scene(root);\r\n            Stage stage=new Stage();\r\n            stage.setScene(scene);\r\n\r\n            /*String[] userData=new String[2];\r\n            userData[0]=currentCenter;\r\n            userData[1]=currentUser;\r\n            scene.setUserData(userData);\r\n\r\n            System.out.println(userData[0]);\r\n\r\n            stage.show();*/\r\n        }\r\n        catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Registra sul file di testo relativo al centro vaccinale selezionato, gli eventi avversi inseriti dall'utente.\r\n     * @param actionEvent L'evento che richiama il metodo. Necessario ad ottenere la scena attuale da cui prendere i dati inseriti dall'utente.\r\n     */\r\n    public void registerEventiAvversi(ActionEvent actionEvent){\r\n        try {\r\n            Scene currentScene = ((Button) actionEvent.getSource()).getScene();\r\n\r\n            String[] userData = (String[]) currentScene.getUserData();\r\n            currentCenter = userData[0];\r\n            currentUser = userData[1];\r\n\r\n            System.out.println(currentCenter);\r\n\r\n            Spinner<Integer> spn_headache = (Spinner<Integer>) currentScene.lookup(\"#spn_headache\");\r\n            Spinner<Integer> spn_fever = (Spinner<Integer>) currentScene.lookup(\"#spn_fever\");\r\n            Spinner<Integer> spn_hurt = (Spinner<Integer>) currentScene.lookup(\"#spn_hurt\");\r\n            Spinner<Integer> spn_linf = (Spinner<Integer>) currentScene.lookup(\"#spn_linf\");\r\n            Spinner<Integer> spn_tac = (Spinner<Integer>) currentScene.lookup(\"#spn_tac\");\r\n            Spinner<Integer> spn_crs = (Spinner<Integer>) currentScene.lookup(\"#spn_crs\");\r\n            TextField txt_other1 = (TextField) currentScene.lookup(\"#txt_other\");\r\n            Spinner<Integer> spn_other1 = (Spinner<Integer>) currentScene.lookup(\"#spn_other\");\r\n\r\n\r\n            int evento1 = spn_headache.getValue();//evento1 = Mal di testa\r\n            int evento2 = spn_fever.getValue(); //evento2 = Febbre\r\n            int evento3 = spn_hurt.getValue(); //evento3 = Dolori muscolari o articolari\r\n            int evento4 = spn_linf.getValue(); //evento4 = Linfoadenopatia\r\n            int evento5 = spn_tac.getValue(); //evento5 = Tachicardia\r\n            int evento6 = spn_crs.getValue();//evento6 = Crisi ipertensiva\r\n            String otherEvent = txt_other1.getText();\r\n            int otherEventValue = spn_other1.getValue();\r\n\r\n            FileReader reader = new FileReader(PRE_PATH_TO_EVENTI_AVVERSI + currentCenter + AFTER_PATH_TO_EVENTI_AVVERSI);\r\n            BufferedReader in = new BufferedReader(reader);\r\n            boolean authorized = false;\r\n            boolean alreadyIn = false;\r\n            String line;\r\n\r\n            while ((line = in.readLine()) != null) {\r\n                String[] data = line.split(\";\");\r\n                if (data[0].equals(LINE_TYPE_PERSON) && data[3].equalsIgnoreCase(currentUser)) {\r\n                    authorized = true;\r\n                } else if (data[0].equals(LINE_TYPE_EVENT) && data[2].equalsIgnoreCase(currentUser)) {\r\n                    alreadyIn = true;\r\n                }\r\n            }\r\n\r\n            if (alreadyIn) {\r\n                Alert alertAlreadyIn = new Alert(Alert.AlertType.ERROR);\r\n                alertAlreadyIn.setTitle(\"Eventi già inseriti\");\r\n                alertAlreadyIn.setContentText(\"L'utente ha già inserito una volta degli eventi avversi presso il centro attuale\");\r\n                alertAlreadyIn.showAndWait();\r\n            }\r\n            else if (authorized) {\r\n\r\n                FileWriter writer = new FileWriter(PRE_PATH_TO_EVENTI_AVVERSI + currentCenter + AFTER_PATH_TO_EVENTI_AVVERSI, true);\r\n                BufferedWriter out = new BufferedWriter(writer);\r\n                //String fileInput = \"Mal di Testa:\" + evento1 + \";\" + \"Febbre:\" + evento2 + \";\" + \"Dolori muscolari o articolari:\" + evento3 + \";\" + \"Linfoadenopatia:\" + evento4 + \";\" + \"Tachicardia:\" + evento5 + \";\" + \"Crisi ipertensiva:\" + evento6 + \";\";\r\n\r\n                String fileInput = LINE_TYPE_EVENT + \";\" + currentCenter + \";\" + currentUser + \";\" + evento1 + \";\" + evento2 + \";\" + evento3 + \";\" + evento4 + \";\" + evento5 + \";\" + evento6;\r\n                if (otherEvent.compareTo(\"\") != 0) {\r\n                    fileInput += \";\" + otherEvent + \";\" + otherEventValue;\r\n                }\r\n\r\n                out.write(fileInput);\r\n                out.newLine();\r\n                out.flush();\r\n                out.close();\r\n            } else {\r\n                Alert alertNoPermission = new Alert(Alert.AlertType.ERROR);\r\n                alertNoPermission.setTitle(\"Utente non autorizzato\");\r\n                alertNoPermission.setContentText(\"Non sei stato vaccinato presso il centro selezionato!\");\r\n                alertNoPermission.showAndWait();\r\n            }\r\n\r\n            Stage stage = (Stage) currentScene.getWindow();\r\n            stage.close();\r\n        }\r\n        catch (IOException e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/cittadini/MainCittadini.java b/src/main/java/cittadini/MainCittadini.java
--- a/src/main/java/cittadini/MainCittadini.java	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/src/main/java/cittadini/MainCittadini.java	(date 1649854554870)
@@ -73,6 +73,10 @@
     private Stage currentStage;
 
     public MainCittadini(Stage stage){
+        loadMainCittadiniUI(stage);
+    }
+
+    public void loadMainCittadiniUI(Stage stage){
         try {
             FXMLLoader loader = new FXMLLoader();
             URL xmlUrl = getClass().getResource("/fxml/MainCittadini.fxml");
@@ -89,8 +93,22 @@
             stage.setY(50);
             stage.setX(175);
 
-            String[] userData = new String[2];
-            scene.setUserData(userData);
+            String[] userData= (String[]) stage.getUserData();
+            currentUser=userData[0];
+            currentCenter=userData[1];
+
+            if(currentUser!=null){
+                Button btn_logout=new Button();
+                btn_logout.setPrefWidth(100);
+                btn_logout.setPrefHeight(30);
+                btn_logout.setOnAction(new EventHandler<ActionEvent>() {
+                    @Override
+                    public void handle(ActionEvent event) {
+                        currentUser=null;
+                        loadMainCittadiniUI(currentStage);
+                    }
+                });
+            }
 
             scrollPane_CentriVaccinali = (ScrollPane) scene.lookup("#scrollPane_CentriVaccinali");
             scrollPane_CentriVaccinali.lookup(".viewport").setStyle("-fx-background-color: #1a73e8;");
@@ -525,29 +543,29 @@
      * Controlla che l'utente sia loggato quando prova ad inserire nuovi eventi avversi.
      * @param event L'evento che richiama il metodo. Necessario per ottenere la scena attuale da cui prendere il nome del centro vaccinale selezionato e, se presente, l'utente attuale.
      */
-    public void checkLogin(ActionEvent event){
+    //TODO sistemare sta roba
+    /*public void checkLogin(ActionEvent event){
         Scene mainScene=((Button)event.getSource()).getScene();
         Stage currentStage=(Stage)mainScene.getWindow();
-        String[] userData=(String[]) mainScene.getUserData();
-        currentCenter=userData[0];
 
-        if(userData[1]!=null){
-            currentUser=userData[1];
+        if(currentUser!=null){
             //TODO rivedere dove porta il login e il register
-            loadRegistraEventiAvversiUI();
+            loadRegistraEventiAvversiUI(currentStage);
         }
         else{
             //TODO aggiungere un popup per dire all'utente di loggarsi prima
-            loadLoginUI(currentStage);
+            //loadLoginUI(currentStage);
         }
-    }
+    }*/
 
     /**
      * Carica la UI che permette ad un utente di effettuare il login, o in alternativa, di caricare la UI necessaria alla registrazione
-     * @param stage La scena da cui inserire e prendere il nome centro vaccinale e il codice fiscale del cittadino loggato
+     * @param event La scena da cui inserire e prendere il nome centro vaccinale e il codice fiscale del cittadino loggato
      */
-    public void loadLoginUI(Stage stage){
+    public void loadLoginUI(ActionEvent event){
         try {
+            Stage stage=(Stage)((Button)event.getSource()).getScene().getWindow();
+
             FXMLLoader loader = new FXMLLoader();
             URL url = getClass().getResource("/fxml/LoginUtente.fxml");
             loader.setLocation(url);
@@ -565,16 +583,15 @@
     /**
      * Crea la UI che permette ad un utente di inserire eventi avversi.
      */
-    public void loadRegistraEventiAvversiUI(){
+    public void loadRegistraEventiAvversiUI(Stage stage){
         try {
 
             FXMLLoader loader=new FXMLLoader();
-            URL url=getClass().getResource("registraEventiAvversi.fxml");
+            URL url=getClass().getResource("/fxml/registraEventiAvversi.fxml");
             loader.setLocation(url);
             Parent root=loader.load();
 
             Scene scene=new Scene(root);
-            Stage stage=new Stage();
             stage.setScene(scene);
 
             /*String[] userData=new String[2];
@@ -592,87 +609,28 @@
     }
 
     /**
-     * Registra sul file di testo relativo al centro vaccinale selezionato, gli eventi avversi inseriti dall'utente.
-     * @param actionEvent L'evento che richiama il metodo. Necessario ad ottenere la scena attuale da cui prendere i dati inseriti dall'utente.
+     * Carica la UI necessaria ad effettuare la registrazione di un utente.
+     * @param event L'evento che richiama il metodo. Necessario per chiudere la UI di login
      */
-    public void registerEventiAvversi(ActionEvent actionEvent){
+    public void loadRegisterCitizenUI(ActionEvent event){
         try {
-            Scene currentScene = ((Button) actionEvent.getSource()).getScene();
-
-            String[] userData = (String[]) currentScene.getUserData();
-            currentCenter = userData[0];
-            currentUser = userData[1];
-
-            System.out.println(currentCenter);
-
-            Spinner<Integer> spn_headache = (Spinner<Integer>) currentScene.lookup("#spn_headache");
-            Spinner<Integer> spn_fever = (Spinner<Integer>) currentScene.lookup("#spn_fever");
-            Spinner<Integer> spn_hurt = (Spinner<Integer>) currentScene.lookup("#spn_hurt");
-            Spinner<Integer> spn_linf = (Spinner<Integer>) currentScene.lookup("#spn_linf");
-            Spinner<Integer> spn_tac = (Spinner<Integer>) currentScene.lookup("#spn_tac");
-            Spinner<Integer> spn_crs = (Spinner<Integer>) currentScene.lookup("#spn_crs");
-            TextField txt_other1 = (TextField) currentScene.lookup("#txt_other");
-            Spinner<Integer> spn_other1 = (Spinner<Integer>) currentScene.lookup("#spn_other");
-
-
-            int evento1 = spn_headache.getValue();//evento1 = Mal di testa
-            int evento2 = spn_fever.getValue(); //evento2 = Febbre
-            int evento3 = spn_hurt.getValue(); //evento3 = Dolori muscolari o articolari
-            int evento4 = spn_linf.getValue(); //evento4 = Linfoadenopatia
-            int evento5 = spn_tac.getValue(); //evento5 = Tachicardia
-            int evento6 = spn_crs.getValue();//evento6 = Crisi ipertensiva
-            String otherEvent = txt_other1.getText();
-            int otherEventValue = spn_other1.getValue();
-
-            FileReader reader = new FileReader(PRE_PATH_TO_EVENTI_AVVERSI + currentCenter + AFTER_PATH_TO_EVENTI_AVVERSI);
-            BufferedReader in = new BufferedReader(reader);
-            boolean authorized = false;
-            boolean alreadyIn = false;
-            String line;
-
-            while ((line = in.readLine()) != null) {
-                String[] data = line.split(";");
-                if (data[0].equals(LINE_TYPE_PERSON) && data[3].equalsIgnoreCase(currentUser)) {
-                    authorized = true;
-                } else if (data[0].equals(LINE_TYPE_EVENT) && data[2].equalsIgnoreCase(currentUser)) {
-                    alreadyIn = true;
-                }
-            }
+            //Scene mainScene=((Button)event.getSource()).getScene();
+            Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();
 
-            if (alreadyIn) {
-                Alert alertAlreadyIn = new Alert(Alert.AlertType.ERROR);
-                alertAlreadyIn.setTitle("Eventi già inseriti");
-                alertAlreadyIn.setContentText("L'utente ha già inserito una volta degli eventi avversi presso il centro attuale");
-                alertAlreadyIn.showAndWait();
-            }
-            else if (authorized) {
+            FXMLLoader loader = new FXMLLoader();
+            URL url = getClass().getResource("/fxml/RegistraUtente.fxml");
+            loader.setLocation(url);
+            Parent root = loader.load();
 
-                FileWriter writer = new FileWriter(PRE_PATH_TO_EVENTI_AVVERSI + currentCenter + AFTER_PATH_TO_EVENTI_AVVERSI, true);
-                BufferedWriter out = new BufferedWriter(writer);
-                //String fileInput = "Mal di Testa:" + evento1 + ";" + "Febbre:" + evento2 + ";" + "Dolori muscolari o articolari:" + evento3 + ";" + "Linfoadenopatia:" + evento4 + ";" + "Tachicardia:" + evento5 + ";" + "Crisi ipertensiva:" + evento6 + ";";
+            Scene scene = new Scene(root);
+            currentStage.setScene(scene);
 
-                String fileInput = LINE_TYPE_EVENT + ";" + currentCenter + ";" + currentUser + ";" + evento1 + ";" + evento2 + ";" + evento3 + ";" + evento4 + ";" + evento5 + ";" + evento6;
-                if (otherEvent.compareTo("") != 0) {
-                    fileInput += ";" + otherEvent + ";" + otherEventValue;
-                }
-
-                out.write(fileInput);
-                out.newLine();
-                out.flush();
-                out.close();
-            } else {
-                Alert alertNoPermission = new Alert(Alert.AlertType.ERROR);
-                alertNoPermission.setTitle("Utente non autorizzato");
-                alertNoPermission.setContentText("Non sei stato vaccinato presso il centro selezionato!");
-                alertNoPermission.showAndWait();
-            }
-
-            Stage stage = (Stage) currentScene.getWindow();
-            stage.close();
+            //scene.setUserData(mainScene);
         }
-        catch (IOException e){
+        catch (Exception e){
             e.printStackTrace();
         }
+
     }
 
 }
Index: src/main/java/centrivaccinali/SelectionUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package centrivaccinali;\r\n\r\nimport cittadini.MainCittadini;\r\nimport javafx.application.Application;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.URL;\r\n\r\npublic class SelectionUI extends Application {\r\n    /**\r\n     * Crea la UI principale che permette di scegliere il portale. Metodo che viene eseguito subito dopo la creazione della classe.\r\n     * @param stage Lo stage che conterrà la scena. Uno stage è una finestra, mentre una scena è tutto ciò contenuto in uno stage.\r\n     * @throws Exception L'eccezione provocata dallo start del programma\r\n     */\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        FXMLLoader loader = new FXMLLoader();\r\n        URL xmlUrl = getClass().getResource(\"/fxml/SelectionUI.fxml\");\r\n\r\n        System.out.println(xmlUrl.toString());\r\n        loader.setLocation(xmlUrl);\r\n\r\n        Parent root = loader.load();\r\n\r\n        Scene scene=new Scene(root);\r\n\r\n        stage.setScene(scene);\r\n        stage.setTitle(\"Seleziona il Portale\");\r\n\r\n        //currentStage=stage;\r\n\r\n\r\n        InputStream icon = getClass().getResourceAsStream(\"fiorellino.png\");\r\n        Image image = new Image(icon);\r\n\r\n        stage.getIcons().add(image);\r\n        stage.show();\r\n    }\r\n\r\n    /**\r\n     * Crea la UI del portale Cittadini. Viene richiamato una volta che viene selezionato il portale Cittadini dalla UI principale.\r\n     * @param event L'evento che richiama il metodo. Necessario per ottenere lo stage da chiudere.\r\n     */\r\n    public void onCittadiniSelected(ActionEvent event){\r\n        try {\r\n            Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();\r\n\r\n            //currentStage.close();\r\n\r\n            new MainCittadini(currentStage);\r\n            /*FXMLLoader loader = new FXMLLoader();\r\n            URL xmlUrl = getClass().getResource(\"/fxml/MainCittadini.fxml\");\r\n            System.out.println(xmlUrl.toString());\r\n            loader.setLocation(xmlUrl);\r\n\r\n            Parent root = loader.load();\r\n\r\n            Scene scene=new Scene(root);\r\n\r\n            Stage currentStage=(Stage)((Button)event.getSource()).getScene().getWindow();\r\n\r\n            currentStage.setScene(scene);\r\n            currentStage.setTitle(\"Portale Cittadini\");*/\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea la UI del portale Centri Vaccinali. Viene richiamato una volta che viene selezionato il portale Centri Vaccinale dalla UI principale.\r\n     */\r\n    public void onCentriVaccinaliSelected(ActionEvent event){\r\n        try{\r\n            FXMLLoader fxmlLoader = new FXMLLoader();\r\n            URL url = getClass().getResource(\"/fxml/PortaleOperatori.fxml\");\r\n            fxmlLoader.setLocation(url);\r\n            Parent root = fxmlLoader.load();\r\n\r\n            Scene scene = new Scene(root);\r\n\r\n            Stage stage=(Stage)((Button)event.getSource()).getScene().getWindow();\r\n\r\n            stage.setScene(scene);\r\n            stage.setTitle(\"Portale Operatori\");\r\n            stage.setY(50);\r\n            stage.setX(175);\r\n\r\n            String[] userData = new String[2];\r\n            scene.setUserData(userData);\r\n\r\n            /*scrollPane_CentriVaccinali = (ScrollPane) scene.lookup(\"#scrollPane_CentriVaccinali\");\r\n            scrollPane_CentriVaccinali.lookup(\".viewport\").setStyle(\"-fx-background-color: #1a73e8;\");\r\n\r\n            centriVaccinaliList = getCentriVaccinaliFromFile();\r\n\r\n            creaVbox(centriVaccinaliList);*/\r\n\r\n            stage.show();\r\n        }\r\n        catch (IOException e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    /*public void loadMainCittadiniUI(Stage stage){\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader();\r\n            URL url = getClass().getResource(\"/cittadini/MainCittadini.fxml\");\r\n            fxmlLoader.setLocation(url);\r\n            Parent root = fxmlLoader.load();\r\n\r\n            Scene scene = new Scene(root);\r\n\r\n            stage.setScene(scene);\r\n            stage.setTitle(\"Portale Cittadini\");\r\n            stage.setY(50);\r\n            stage.setX(175);\r\n\r\n            String[] userData = new String[2];\r\n            scene.setUserData(userData);\r\n\r\n            scrollPane_CentriVaccinali = (ScrollPane) scene.lookup(\"#scrollPane_CentriVaccinali\");\r\n            scrollPane_CentriVaccinali.lookup(\".viewport\").setStyle(\"-fx-background-color: #1a73e8;\");\r\n\r\n            centriVaccinaliList = Cittadini.getCentriVaccinaliFromFile();\r\n\r\n            creaVbox(centriVaccinaliList);\r\n\r\n            stage.show();\r\n        }\r\n        catch (IOException e){\r\n            e.printStackTrace();\r\n        }\r\n    }*/\r\n\r\n    public void onChoiceButtonHover(MouseEvent event){\r\n        Button btn=(Button)event.getSource();\r\n        ImageView imgView = (ImageView) btn.getScene().lookup(\"#imgBg\");\r\n\r\n        if(btn.getText().equals(\"Portale Cittadini\")) {\r\n            imgView.setImage(new Image(getClass().getResourceAsStream(\"/centrivaccinali/crowd.png\")));\r\n            btn.getScene().lookup(\"#lbl_main\").setVisible(false);\r\n            btn.getScene().lookup(\"#lbl_citizen\").setVisible(true);\r\n        }\r\n        else if(btn.getText().equals(\"Portale Operatori\")){\r\n            imgView.setImage(new Image(getClass().getResourceAsStream(\"/centrivaccinali/medici.png\")));\r\n            btn.getScene().lookup(\"#lbl_main\").setVisible(false);\r\n            btn.getScene().lookup(\"#lbl_operator\").setVisible(true);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void onChoiceButtonExit(MouseEvent event){\r\n        ImageView imgView=(ImageView)((Button)event.getSource()).getScene().lookup(\"#imgBg\");\r\n        imgView.setImage(new Image(getClass().getResourceAsStream(\"/centrivaccinali/varese.png\")));\r\n\r\n        Button btnSource=(Button)event.getSource();\r\n        btnSource.getScene().lookup(\"#lbl_main\").setVisible(true);\r\n        btnSource.getScene().lookup(\"#lbl_citizen\").setVisible(false);\r\n        btnSource.getScene().lookup(\"#lbl_operator\").setVisible(false);\r\n    }\r\n\r\n    /**\r\n     * Termina ogni processo aperto dal programma. Viene eseguito automaticamente qualora ogni finestra del programma venga chiusa.\r\n     * @throws Exception L'eccezione provocata dallo stop del programma.\r\n     */\r\n    @Override\r\n    public void stop() throws Exception {\r\n        super.stop();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/centrivaccinali/SelectionUI.java b/src/main/java/centrivaccinali/SelectionUI.java
--- a/src/main/java/centrivaccinali/SelectionUI.java	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/src/main/java/centrivaccinali/SelectionUI.java	(date 1649853870667)
@@ -34,6 +34,7 @@
 
         Scene scene=new Scene(root);
 
+        stage.setUserData(new String[]{null,null});
         stage.setScene(scene);
         stage.setTitle("Seleziona il Portale");
 
Index: target/classes/fxml/LoginUtente.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<AnchorPane prefHeight=\"305.0\" prefWidth=\"480.0\" style=\"-fx-background-color: #1a73e8;\" xmlns=\"http://javafx.com/javafx/11.0.2\" xmlns:fx=\"http://javafx.com/fxml/1\">\r\n   <children>\r\n      <Button layoutX=\"0.0\" layoutY=\"7.5\" onMouseClicked=\"#goBackToMain\" style=\"-fx-background-color: transparent;\">\r\n         <graphic>\r\n            <ImageView fitHeight=\"22.0\" fitWidth=\"25.0\" preserveRatio=\"false\">\r\n               <Image url=\"@/centrivaccinali/goBackIcon.png\" />\r\n            </ImageView>\r\n         </graphic>\r\n      </Button>\r\n      <PasswordField fx:id=\"pswd_login\" layoutX=\"100.0\" layoutY=\"175.0\" prefHeight=\"25.0\" prefWidth=\"280.0\" promptText=\"Password\" />\r\n      <TextField fx:id=\"txt_userLogin\" layoutX=\"100.0\" layoutY=\"130.0\" prefHeight=\"25.0\" prefWidth=\"280.0\" promptText=\"Email\" />\r\n      <Button fx:id=\"login_button\" layoutX=\"125.0\" layoutY=\"232.5\" mnemonicParsing=\"false\" onAction=\"#loggaCittadini\" prefHeight=\"25.0\" prefWidth=\"100.0\" style=\"-fx-background-radius: 8px; -fx-background-color: white;\" text=\"Login\">\r\n         <font>\r\n            <Font size=\"18.0\" />\r\n         </font></Button>\r\n      <Button fx:id=\"register_button\" layoutX=\"250.0\" layoutY=\"232.5\" mnemonicParsing=\"false\" onAction=\"#loadRegisterCitizenUI\" prefHeight=\"25.0\" prefWidth=\"100.0\" style=\"-fx-background-radius: 8px; -fx-background-color: white;\" text=\"Registrati\">\r\n         <font>\r\n            <Font size=\"18.0\" />\r\n         </font>\r\n      </Button>\r\n      <ImageView fitHeight=\"75.0\" fitWidth=\"75.0\" layoutX=\"208.0\" layoutY=\"38.0\" pickOnBounds=\"true\" preserveRatio=\"false\">\r\n         <Image url=\"@/cittadini/account.png\" />\r\n      </ImageView>\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/fxml/LoginUtente.fxml b/target/classes/fxml/LoginUtente.fxml
--- a/target/classes/fxml/LoginUtente.fxml	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/target/classes/fxml/LoginUtente.fxml	(date 1649769837495)
@@ -5,7 +5,7 @@
 <?import javafx.scene.layout.*?>
 <?import javafx.scene.text.*?>
 
-<AnchorPane prefHeight="305.0" prefWidth="480.0" style="-fx-background-color: #1a73e8;" xmlns="http://javafx.com/javafx/11.0.2" xmlns:fx="http://javafx.com/fxml/1">
+<AnchorPane prefHeight="305.0" prefWidth="480.0" style="-fx-background-color: #1a73e8;" xmlns="http://javafx.com/javafx/11.0.2" xmlns:fx="http://javafx.com/fxml/1" fx:controller="cittadini.LoginUtente">
    <children>
       <Button layoutX="0.0" layoutY="7.5" onMouseClicked="#goBackToMain" style="-fx-background-color: transparent;">
          <graphic>
Index: src/main/resources/fxml/registraEventiAvversi.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.paint.*?>\r\n<?import javafx.scene.shape.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<AnchorPane prefHeight=\"650.0\" prefWidth=\"550.0\" xmlns=\"http://javafx.com/javafx/11.0.2\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"cittadini.Cittadini\">\r\n   <children>\r\n      <Rectangle arcHeight=\"5.0\" arcWidth=\"5.0\" height=\"650.0\" stroke=\"BLACK\" strokeType=\"INSIDE\" width=\"550.0\">\r\n         <fill>\r\n            <RadialGradient centerX=\"0.5\" centerY=\"0.5\" cycleMethod=\"REFLECT\" radius=\"0.5\">\r\n               <stops>\r\n                  <Stop>\r\n                     <color>\r\n                        <Color />\r\n                     </color>\r\n                  </Stop>\r\n                  <Stop offset=\"1.0\">\r\n                     <color>\r\n                        <Color red=\"0.09803921729326248\" green=\"0.4901960790157318\" blue=\"0.7882353067398071\" />\r\n                     </color>\r\n                  </Stop>\r\n               </stops>\r\n            </RadialGradient>\r\n         </fill></Rectangle>\r\n      <Rectangle arcHeight=\"5.0\" arcWidth=\"5.0\" fill=\"#91ceff\" height=\"609.0\" layoutX=\"15.0\" layoutY=\"20.0\" stroke=\"BLACK\" strokeType=\"INSIDE\" width=\"520.0\" />\r\n      <TextField fx:id=\"txt_other\" layoutX=\"95.0\" layoutY=\"495.0\" prefHeight=\"25.0\" prefWidth=\"237.0\" />\r\n      <Spinner fx:id=\"spn_headache\" editable=\"true\" layoutX=\"365.0\" layoutY=\"150.0\" max=\"5\" min=\"0\" prefHeight=\"25.0\" prefWidth=\"55.0\" />\r\n      <Spinner fx:id=\"spn_fever\" editable=\"true\" layoutX=\"365.0\" layoutY=\"200.0\" max=\"5\" min=\"0\" prefHeight=\"25.0\" prefWidth=\"55.0\" />\r\n      <Spinner fx:id=\"spn_hurt\" editable=\"true\" layoutX=\"365.0\" layoutY=\"250.0\" max=\"5\" min=\"0\" prefHeight=\"25.0\" prefWidth=\"55.0\" />\r\n      <Label layoutX=\"95.0\" layoutY=\"150.0\" prefHeight=\"22.0\" prefWidth=\"109.0\" text=\"Mal di testa:\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label layoutX=\"95.0\" layoutY=\"200.0\" prefHeight=\"22.0\" prefWidth=\"70.0\" text=\"Febbre:\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label layoutX=\"95.0\" layoutY=\"250.0\" prefHeight=\"22.0\" prefWidth=\"228.0\" text=\"Dolori muscolari o articolari:\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label layoutX=\"83.0\" layoutY=\"68.0\" prefHeight=\"67.0\" prefWidth=\"384.0\" text=\"Per ogni sintomo se riscontrato inserire un valore da 1 a 5 che rappresenti l'intensità del sintomo:\" wrapText=\"true\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label layoutX=\"95.0\" layoutY=\"300.0\" prefHeight=\"22.0\" prefWidth=\"145.0\" text=\"Linfoadenopatia:\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Label>\r\n      <Button layoutX=\"393.0\" layoutY=\"564.0\" mnemonicParsing=\"false\" onAction=\"#registerEventiAvversi\" style=\"-fx-background-color: #FFFFFF; -fx-background-radius: 0; -fx-border-color: #197dc9; -fx-border-width: 4;\" text=\"Conferma\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font></Button>\r\n      <Button fx:id=\"btn_annulla\" layoutX=\"269.0\" layoutY=\"564.0\" mnemonicParsing=\"false\" onAction=\"#onAnnullaButtonClicked\" prefHeight=\"42.0\" prefWidth=\"109.0\" style=\"-fx-background-color: #FFFFFF; -fx-background-radius: 0; -fx-border-color: #197dc9; -fx-border-width: 4;\" text=\"Annulla\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Button>\r\n      <Spinner fx:id=\"spn_linf\" editable=\"true\" layoutX=\"365.0\" layoutY=\"300.0\" max=\"5\" min=\"0\" prefHeight=\"25.0\" prefWidth=\"55.0\" />\r\n      <Label layoutX=\"95.0\" layoutY=\"350.0\" prefHeight=\"22.0\" prefWidth=\"109.0\" text=\"Tachicardia:\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Label>\r\n      <Spinner fx:id=\"spn_tac\" editable=\"true\" layoutX=\"365.0\" layoutY=\"350.0\" max=\"5\" min=\"0\" prefHeight=\"25.0\" prefWidth=\"55.0\" />\r\n      <Label layoutX=\"95.0\" layoutY=\"400.0\" prefHeight=\"22.0\" prefWidth=\"145.0\" text=\"Crisi ipertensiva:\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Label>\r\n      <Spinner fx:id=\"spn_crs\" editable=\"true\" layoutX=\"365.0\" layoutY=\"400.0\" max=\"5\" min=\"0\" prefHeight=\"25.0\" prefWidth=\"55.0\" />\r\n      <Spinner fx:id=\"spn_other\" editable=\"true\" layoutX=\"366.0\" layoutY=\"495.0\" max=\"5\" min=\"1\" prefHeight=\"25.0\" prefWidth=\"55.0\" />\r\n      <Label layoutX=\"95.0\" layoutY=\"450.0\" prefHeight=\"22.0\" prefWidth=\"298.0\" text=\"Altri sintomi (massimo 256 caratteri):\">\r\n         <font>\r\n            <Font name=\"Franklin Gothic Medium\" size=\"18.0\" />\r\n         </font>\r\n      </Label>\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/fxml/registraEventiAvversi.fxml b/src/main/resources/fxml/registraEventiAvversi.fxml
--- a/src/main/resources/fxml/registraEventiAvversi.fxml	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/src/main/resources/fxml/registraEventiAvversi.fxml	(date 1649844674040)
@@ -6,7 +6,7 @@
 <?import javafx.scene.shape.*?>
 <?import javafx.scene.text.*?>
 
-<AnchorPane prefHeight="650.0" prefWidth="550.0" xmlns="http://javafx.com/javafx/11.0.2" xmlns:fx="http://javafx.com/fxml/1" fx:controller="cittadini.Cittadini">
+<AnchorPane prefHeight="650.0" prefWidth="550.0" xmlns="http://javafx.com/javafx/11.0.2" xmlns:fx="http://javafx.com/fxml/1" fx:controller="cittadini.RegistraEventiAvversi">
    <children>
       <Rectangle arcHeight="5.0" arcWidth="5.0" height="650.0" stroke="BLACK" strokeType="INSIDE" width="550.0">
          <fill>
Index: src/main/resources/fxml/nuovoCentroVaccinale.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<AnchorPane prefHeight=\"400.0\" prefWidth=\"550.0\" style=\"-fx-background-color: #1a73e8\" xmlns=\"http://javafx.com/javafx/11.0.2\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"centrivaccinali.CentriVaccinali\">\r\n   <children>\r\n      <Button layoutX=\"0.0\" layoutY=\"7.5\" onMouseClicked=\"#goBackToOpzioniOperatore\" style=\"-fx-background-color: transparent;\">\r\n         <graphic>\r\n            <ImageView fitHeight=\"22.0\" fitWidth=\"25.0\" preserveRatio=\"false\">\r\n               <Image url=\"@/centrivaccinali/goBackIcon.png\" />\r\n            </ImageView>\r\n         </graphic>\r\n      </Button>\r\n      <TextField fx:id=\"txt_nomeCentro\" layoutX=\"51.0\" layoutY=\"160.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Nome Centro\" />\r\n      <TextField fx:id=\"txt_cap\" layoutX=\"287.0\" layoutY=\"242.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"CAP\" />\r\n      <TextField fx:id=\"txt_comune\" layoutX=\"285.0\" layoutY=\"199.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Comune\" />\r\n      <TextField fx:id=\"txt_provincia\" layoutX=\"50.0\" layoutY=\"242.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Provincia\" />\r\n      <TextField fx:id=\"txt_via\" layoutX=\"286.0\" layoutY=\"160.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Via\" />\r\n      <ChoiceBox fx:id=\"cbx_qualificatore\" layoutX=\"287.0\" layoutY=\"290.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" />\r\n      <ChoiceBox fx:id=\"cbx_tipologia\" layoutX=\"51.0\" layoutY=\"290.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" />\r\n      <TextField fx:id=\"txt_numeroCivico\" layoutX=\"50.0\" layoutY=\"199.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Numero Civico\" />\r\n      <Button fx:id=\"btn_nuovoPaziente\" layoutX=\"275.0\" layoutY=\"339.0\" mnemonicParsing=\"false\" onAction=\"#registraCentroVaccinale\" prefHeight=\"25.0\" prefWidth=\"100.0\" style=\"-fx-background-radius: 8px; -fx-background-color: white;\" text=\"Registra\">\r\n         <font>\r\n            <Font name=\"System\" size=\"17.0\" />\r\n         </font></Button>\r\n      <Button fx:id=\"btn_annulla\" layoutX=\"164.0\" layoutY=\"339.0\" mnemonicParsing=\"false\" onAction=\"#annulla_button\" prefHeight=\"25.0\" prefWidth=\"100.0\" style=\"-fx-background-radius: 8px; -fx-background-color: white;\" text=\"Annulla\">\r\n         <font>\r\n            <Font name=\"System\" size=\"17.0\" />\r\n         </font>\r\n      </Button>\r\n      <ImageView fitHeight=\"75.0\" fitWidth=\"75.0\" layoutX=\"238.0\" layoutY=\"37.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <Image url=\"@/centrivaccinali/hub.png\" />\r\n      </ImageView>\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/fxml/nuovoCentroVaccinale.fxml b/src/main/resources/fxml/nuovoCentroVaccinale.fxml
--- a/src/main/resources/fxml/nuovoCentroVaccinale.fxml	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/src/main/resources/fxml/nuovoCentroVaccinale.fxml	(date 1649843478809)
@@ -5,7 +5,7 @@
 <?import javafx.scene.layout.*?>
 <?import javafx.scene.text.*?>
 
-<AnchorPane prefHeight="400.0" prefWidth="550.0" style="-fx-background-color: #1a73e8" xmlns="http://javafx.com/javafx/11.0.2" xmlns:fx="http://javafx.com/fxml/1" fx:controller="centrivaccinali.CentriVaccinali">
+<AnchorPane prefHeight="400.0" prefWidth="550.0" style="-fx-background-color: #1a73e8" xmlns="http://javafx.com/javafx/11.0.2" xmlns:fx="http://javafx.com/fxml/1">
    <children>
       <Button layoutX="0.0" layoutY="7.5" onMouseClicked="#goBackToOpzioniOperatore" style="-fx-background-color: transparent;">
          <graphic>
Index: target/classes/fxml/nuovoCentroVaccinale.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<AnchorPane prefHeight=\"400.0\" prefWidth=\"550.0\" style=\"-fx-background-color: #1a73e8\" xmlns=\"http://javafx.com/javafx/11.0.2\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"centrivaccinali.CentriVaccinali\">\r\n   <children>\r\n      <Button layoutX=\"0.0\" layoutY=\"7.5\" onMouseClicked=\"#goBackToOpzioniOperatore\" style=\"-fx-background-color: transparent;\">\r\n         <graphic>\r\n            <ImageView fitHeight=\"22.0\" fitWidth=\"25.0\" preserveRatio=\"false\">\r\n               <Image url=\"@/centrivaccinali/goBackIcon.png\" />\r\n            </ImageView>\r\n         </graphic>\r\n      </Button>\r\n      <TextField fx:id=\"txt_nomeCentro\" layoutX=\"51.0\" layoutY=\"160.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Nome Centro\" />\r\n      <TextField fx:id=\"txt_cap\" layoutX=\"287.0\" layoutY=\"242.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"CAP\" />\r\n      <TextField fx:id=\"txt_comune\" layoutX=\"285.0\" layoutY=\"199.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Comune\" />\r\n      <TextField fx:id=\"txt_provincia\" layoutX=\"50.0\" layoutY=\"242.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Provincia\" />\r\n      <TextField fx:id=\"txt_via\" layoutX=\"286.0\" layoutY=\"160.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Via\" />\r\n      <ChoiceBox fx:id=\"cbx_qualificatore\" layoutX=\"287.0\" layoutY=\"290.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" />\r\n      <ChoiceBox fx:id=\"cbx_tipologia\" layoutX=\"51.0\" layoutY=\"290.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" />\r\n      <TextField fx:id=\"txt_numeroCivico\" layoutX=\"50.0\" layoutY=\"199.0\" prefHeight=\"25.0\" prefWidth=\"213.0\" promptText=\"Numero Civico\" />\r\n      <Button fx:id=\"btn_nuovoPaziente\" layoutX=\"275.0\" layoutY=\"339.0\" mnemonicParsing=\"false\" onAction=\"#registraCentroVaccinale\" prefHeight=\"25.0\" prefWidth=\"100.0\" style=\"-fx-background-radius: 8px; -fx-background-color: white;\" text=\"Registra\">\r\n         <font>\r\n            <Font name=\"System\" size=\"17.0\" />\r\n         </font></Button>\r\n      <Button fx:id=\"btn_annulla\" layoutX=\"164.0\" layoutY=\"339.0\" mnemonicParsing=\"false\" onAction=\"#annulla_button\" prefHeight=\"25.0\" prefWidth=\"100.0\" style=\"-fx-background-radius: 8px; -fx-background-color: white;\" text=\"Annulla\">\r\n         <font>\r\n            <Font name=\"System\" size=\"17.0\" />\r\n         </font>\r\n      </Button>\r\n      <ImageView fitHeight=\"75.0\" fitWidth=\"75.0\" layoutX=\"238.0\" layoutY=\"37.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <Image url=\"@/centrivaccinali/hub.png\" />\r\n      </ImageView>\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/fxml/nuovoCentroVaccinale.fxml b/target/classes/fxml/nuovoCentroVaccinale.fxml
--- a/target/classes/fxml/nuovoCentroVaccinale.fxml	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/target/classes/fxml/nuovoCentroVaccinale.fxml	(date 1649843478809)
@@ -5,7 +5,7 @@
 <?import javafx.scene.layout.*?>
 <?import javafx.scene.text.*?>
 
-<AnchorPane prefHeight="400.0" prefWidth="550.0" style="-fx-background-color: #1a73e8" xmlns="http://javafx.com/javafx/11.0.2" xmlns:fx="http://javafx.com/fxml/1" fx:controller="centrivaccinali.CentriVaccinali">
+<AnchorPane prefHeight="400.0" prefWidth="550.0" style="-fx-background-color: #1a73e8" xmlns="http://javafx.com/javafx/11.0.2" xmlns:fx="http://javafx.com/fxml/1">
    <children>
       <Button layoutX="0.0" layoutY="7.5" onMouseClicked="#goBackToOpzioniOperatore" style="-fx-background-color: transparent;">
          <graphic>
Index: src/main/java/cittadini/Cittadini.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cittadini;\r\n\r\nimport centrivaccinali.SingoloCentroVaccinale;\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.KeyValue;\r\nimport javafx.animation.Timeline;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.MessageDigest;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.*;\r\n\r\n/*Cristian Arcadi 745389 Varese\r\n  David Poletti 746597 Varese\r\n  Eros Marsichina 745299 Varese\r\n  Tommaso Morosi 741227 Varese*/\r\n\r\n//TODO sistemare la JavaDoc\r\n\r\n/**\r\n * Contiene tutte le UI e i metodi del portale Cittadini\r\n */\r\npublic class Cittadini {\r\n    /**\r\n     * Percorso per il file contente le informazioni dei centri vaccinali registrati\r\n     */\r\n    public static final String PATH_TO_CENTRIVACCINALI_DATI = \"data/CentriVaccinali.dati.txt\";\r\n    /**\r\n     * Parte iniziale percorso per il file del centro vaccinale selezionato\r\n     */\r\n    public static final String PRE_PATH_TO_EVENTI_AVVERSI=\"data/Vaccinati_\";\r\n    /**\r\n     * Parte finale del percorso del centro vaccinale selezionato\r\n     */\r\n    public static final String AFTER_PATH_TO_EVENTI_AVVERSI=\".dati.txt\";\r\n    /**\r\n     * Percorso per il file contenente i dati dei cittadini registrati\r\n     */\r\n    public static final String PATH_TO_CITTADINI_REGISTRATI_DATI = \"data/Cittadini_Registrati.dati.txt\";\r\n    /**\r\n     * Tipo di linea del file contente le informazioni relative al vaccinato\r\n     */\r\n    public static final String LINE_TYPE_PERSON =\"V\";\r\n    /**\r\n     * Tipo di linea del file contente le informazioni relative agli eventi avversi\r\n     */\r\n    public static final String LINE_TYPE_EVENT =\"E\";\r\n\r\n\r\n\r\n    /**\r\n     * Chiude la finestra (stage) attuale. Il metodo viene usato per tutte le UI, relative al package, che contengono il tasto \"annulla\".\r\n     * @param event L'evento che richiama il metodo. Necessario per ottenere lo stage da chiudere.\r\n     */\r\n    public void onAnnullaButtonClicked(ActionEvent event){\r\n        Scene currentScene=((Button) event.getSource()).getScene();\r\n        Stage currentStage=(Stage)currentScene.getWindow();\r\n        currentStage.close();\r\n    }\r\n\r\n    /**\r\n     * Torna alla finestra MainCittadini.fxml.\r\n     * @param event L'evento che richiama il metodo. Necessario per ottenere lo stage da chiudere.\r\n     */\r\n    public void goBackToMain(MouseEvent event){\r\n        Stage currentStage = (Stage)((Button)event.getSource()).getScene().getWindow();\r\n\r\n        //loadMainCittadiniUI(currentStage);\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/cittadini/Cittadini.java b/src/main/java/cittadini/Cittadini.java
--- a/src/main/java/cittadini/Cittadini.java	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/src/main/java/cittadini/Cittadini.java	(date 1649844674101)
@@ -32,6 +32,7 @@
   Tommaso Morosi 741227 Varese*/
 
 //TODO sistemare la JavaDoc
+//TODO eliminare questa classe
 
 /**
  * Contiene tutte le UI e i metodi del portale Cittadini
@@ -62,18 +63,6 @@
      */
     public static final String LINE_TYPE_EVENT ="E";
 
-
-
-    /**
-     * Chiude la finestra (stage) attuale. Il metodo viene usato per tutte le UI, relative al package, che contengono il tasto "annulla".
-     * @param event L'evento che richiama il metodo. Necessario per ottenere lo stage da chiudere.
-     */
-    public void onAnnullaButtonClicked(ActionEvent event){
-        Scene currentScene=((Button) event.getSource()).getScene();
-        Stage currentStage=(Stage)currentScene.getWindow();
-        currentStage.close();
-    }
-
     /**
      * Torna alla finestra MainCittadini.fxml.
      * @param event L'evento che richiama il metodo. Necessario per ottenere lo stage da chiudere.
Index: src/main/java/cittadini/RegistraEventiAvversi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/cittadini/RegistraEventiAvversi.java b/src/main/java/cittadini/RegistraEventiAvversi.java
new file mode 100644
--- /dev/null	(date 1649844674024)
+++ b/src/main/java/cittadini/RegistraEventiAvversi.java	(date 1649844674024)
@@ -0,0 +1,149 @@
+package cittadini;
+
+import javafx.event.ActionEvent;
+import javafx.scene.Scene;
+import javafx.scene.control.Alert;
+import javafx.scene.control.Button;
+import javafx.scene.control.Spinner;
+import javafx.scene.control.TextField;
+import javafx.stage.Stage;
+
+import java.io.*;
+
+public class RegistraEventiAvversi {
+    /**
+     * Percorso per il file contente le informazioni dei centri vaccinali registrati
+     */
+    public static final String PATH_TO_CENTRIVACCINALI_DATI = "data/CentriVaccinali.dati.txt";
+    /**
+     * Parte iniziale percorso per il file del centro vaccinale selezionato
+     */
+    public static final String PRE_PATH_TO_EVENTI_AVVERSI="data/Vaccinati_";
+    /**
+     * Parte finale del percorso del centro vaccinale selezionato
+     */
+    public static final String AFTER_PATH_TO_EVENTI_AVVERSI=".dati.txt";
+    /**
+     * Percorso per il file contenente i dati dei cittadini registrati
+     */
+    public static final String PATH_TO_CITTADINI_REGISTRATI_DATI = "data/Cittadini_Registrati.dati.txt";
+    /**
+     * Tipo di linea del file contente le informazioni relative al vaccinato
+     */
+    public static final String LINE_TYPE_PERSON ="V";
+    /**
+     * Tipo di linea del file contente le informazioni relative agli eventi avversi
+     */
+    public static final String LINE_TYPE_EVENT ="E";
+    /**
+     * Lista contente tutti i centri vaccinali presenti nel file. Popolata dal metodo getCentriVaccinaliFromFile()
+     */
+    /**
+     * Codice fiscale dell'utente attualmente loggato
+     */
+    private String currentUser;
+    /**
+     * Centro vaccinale attualmente selezionato
+     */
+    private String currentCenter;
+
+    public RegistraEventiAvversi(Stage stage){
+        String[] userData= (String[]) stage.getUserData();
+        currentUser=userData[0];
+        currentCenter=userData[1];
+    }
+
+    /**
+     * Registra sul file di testo relativo al centro vaccinale selezionato, gli eventi avversi inseriti dall'utente.
+     * @param actionEvent L'evento che richiama il metodo. Necessario ad ottenere la scena attuale da cui prendere i dati inseriti dall'utente.
+     */
+    public void registerEventiAvversi(ActionEvent actionEvent){
+        try {
+            Scene currentScene = ((Button) actionEvent.getSource()).getScene();
+
+            String[] userData = (String[]) currentScene.getUserData();
+            String currentCenter = userData[0];
+            String currentUser = userData[1];
+
+            System.out.println(currentCenter);
+
+            Spinner<Integer> spn_headache = (Spinner<Integer>) currentScene.lookup("#spn_headache");
+            Spinner<Integer> spn_fever = (Spinner<Integer>) currentScene.lookup("#spn_fever");
+            Spinner<Integer> spn_hurt = (Spinner<Integer>) currentScene.lookup("#spn_hurt");
+            Spinner<Integer> spn_linf = (Spinner<Integer>) currentScene.lookup("#spn_linf");
+            Spinner<Integer> spn_tac = (Spinner<Integer>) currentScene.lookup("#spn_tac");
+            Spinner<Integer> spn_crs = (Spinner<Integer>) currentScene.lookup("#spn_crs");
+            TextField txt_other1 = (TextField) currentScene.lookup("#txt_other");
+            Spinner<Integer> spn_other1 = (Spinner<Integer>) currentScene.lookup("#spn_other");
+
+
+            int evento1 = spn_headache.getValue();//evento1 = Mal di testa
+            int evento2 = spn_fever.getValue(); //evento2 = Febbre
+            int evento3 = spn_hurt.getValue(); //evento3 = Dolori muscolari o articolari
+            int evento4 = spn_linf.getValue(); //evento4 = Linfoadenopatia
+            int evento5 = spn_tac.getValue(); //evento5 = Tachicardia
+            int evento6 = spn_crs.getValue();//evento6 = Crisi ipertensiva
+            String otherEvent = txt_other1.getText();
+            int otherEventValue = spn_other1.getValue();
+
+            FileReader reader = new FileReader(PRE_PATH_TO_EVENTI_AVVERSI + currentCenter + AFTER_PATH_TO_EVENTI_AVVERSI);
+            BufferedReader in = new BufferedReader(reader);
+            boolean authorized = false;
+            boolean alreadyIn = false;
+            String line;
+
+            while ((line = in.readLine()) != null) {
+                String[] data = line.split(";");
+                if (data[0].equals(LINE_TYPE_PERSON) && data[3].equalsIgnoreCase(currentUser)) {
+                    authorized = true;
+                } else if (data[0].equals(LINE_TYPE_EVENT) && data[2].equalsIgnoreCase(currentUser)) {
+                    alreadyIn = true;
+                }
+            }
+
+            if (alreadyIn) {
+                Alert alertAlreadyIn = new Alert(Alert.AlertType.ERROR);
+                alertAlreadyIn.setTitle("Eventi già inseriti");
+                alertAlreadyIn.setContentText("L'utente ha già inserito una volta degli eventi avversi presso il centro attuale");
+                alertAlreadyIn.showAndWait();
+            }
+            else if (authorized) {
+
+                FileWriter writer = new FileWriter(PRE_PATH_TO_EVENTI_AVVERSI + currentCenter + AFTER_PATH_TO_EVENTI_AVVERSI, true);
+                BufferedWriter out = new BufferedWriter(writer);
+                //String fileInput = "Mal di Testa:" + evento1 + ";" + "Febbre:" + evento2 + ";" + "Dolori muscolari o articolari:" + evento3 + ";" + "Linfoadenopatia:" + evento4 + ";" + "Tachicardia:" + evento5 + ";" + "Crisi ipertensiva:" + evento6 + ";";
+
+                String fileInput = LINE_TYPE_EVENT + ";" + currentCenter + ";" + currentUser + ";" + evento1 + ";" + evento2 + ";" + evento3 + ";" + evento4 + ";" + evento5 + ";" + evento6;
+                if (otherEvent.compareTo("") != 0) {
+                    fileInput += ";" + otherEvent + ";" + otherEventValue;
+                }
+
+                out.write(fileInput);
+                out.newLine();
+                out.flush();
+                out.close();
+            } else {
+                Alert alertNoPermission = new Alert(Alert.AlertType.ERROR);
+                alertNoPermission.setTitle("Utente non autorizzato");
+                alertNoPermission.setContentText("Non sei stato vaccinato presso il centro selezionato!");
+                alertNoPermission.showAndWait();
+            }
+
+            Stage stage = (Stage) currentScene.getWindow();
+            stage.close();
+        }
+        catch (IOException e){
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * Chiude la finestra (stage) attuale. Il metodo viene usato per tutte le UI, relative al package, che contengono il tasto "annulla".
+     * @param event L'evento che richiama il metodo. Necessario per ottenere lo stage da chiudere.
+     */
+    public void onAnnullaButtonClicked(ActionEvent event){
+        Scene currentScene=((Button) event.getSource()).getScene();
+        Stage currentStage=(Stage)currentScene.getWindow();
+        currentStage.close();
+    }
+}
Index: src/main/java/centrivaccinali/CentriVaccinali.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package centrivaccinali;\r\n\r\nimport cittadini.Cittadini;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.stage.Stage;\r\nimport javafx.application.Application;\r\n\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.StringTokenizer;\r\n\r\n/*Cristian Arcadi 745389 Varese\r\n  David Poletti 746597 Varese\r\n  Eros Marsichina 745299 Varese\r\n  Tommaso Morosi 741227 Varese*/\r\n\r\n/**\r\n * Contiene tutte le UI e i metodi del portale CentriVaccinali. Contiene inoltre la UI che permette di seleziona il portale con cui interagire.\r\n */\r\npublic class CentriVaccinali {\r\n\r\n    /**\r\n     * Contiene il codice di avvio del programma.\r\n     * @param args Gli argomenti di lancio passati via console al programma.\r\n     * @throws Exception L'eccezione del metodo main\r\n     */\r\n    public static void main(String[] args) throws Exception {\r\n         Application.launch();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/centrivaccinali/CentriVaccinali.java b/src/main/java/centrivaccinali/CentriVaccinali.java
--- a/src/main/java/centrivaccinali/CentriVaccinali.java	(revision 047cd53388dc26143ca03556dfe5313f5fc422c7)
+++ b/src/main/java/centrivaccinali/CentriVaccinali.java	(date 1649843544174)
@@ -25,6 +25,8 @@
   Eros Marsichina 745299 Varese
   Tommaso Morosi 741227 Varese*/
 
+//TODO eliminare questa classe
+
 /**
  * Contiene tutte le UI e i metodi del portale CentriVaccinali. Contiene inoltre la UI che permette di seleziona il portale con cui interagire.
  */
